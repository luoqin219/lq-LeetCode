/*** Easy Problem 11: Reverse Linked List */
/**
**Reverse a singly linked list.
**Example:
**Input: 1->2->3->4->5->NULL
**Output: 5->4->3->2->1->NULL
*/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        
        while (curr != null){
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        
        return prev;
    }
}

/**
**Runtime: 0 ms, faster than 100.00% of Java online submissions for Reverse Linked List.
**Memory Usage: 37.2 MB, less than 98.56% of Java online submissions for Reverse Linked List.
*/


/**Another Solution using RECURSIVE method
*very smart
*public ListNode reverseList(ListNode head) {
*    if (head == null || head.next == null) return head;
*    ListNode p = reverseList(head.next);
*    head.next.next = head;
*    head.next = null;
*    return p;
*}
*
*/
