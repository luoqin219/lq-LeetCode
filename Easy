/*** Easy Problem 1: Two Sum */
/**
**Given an array of integers, return indices of the two numbers such that they add up to a specific target.
**You may assume that each input would have exactly one solution, and you may not use the same element twice.
**Example:
**Given nums = [2, 7, 11, 15], target = 9,
**Because nums[0] + nums[1] = 2 + 7 = 9,
**return [0, 1].
*/

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int [] res = new int[2];
        
        for (int i = 0; i < nums.length-1; i++){
            int a = target - nums[i];
            for (int j = 1; j < nums.length; j++){
                if (a == nums[j] && i!=j){
                    res[0] = i;
                    res[1] = j;
                    break;
                }
            }
        }
        return res;
    }
}

/**
**Runtime: 39 ms, faster than 12.83% of Java online submissions for Two Sum.
**Memory Usage: 36.5 MB, less than 99.73% of Java online submissions for Two Sum.
*/
