/*** Easy Problem 21: Pascal's Triangle */
/**
**Given a non-negative index k where k â‰¤ 33, return the kth index row of the Pascal's triangle.
**Note that the row index starts from 0.
**Example:
**Input: 3
**Output: [1,3,3,1]
*/

class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<List<Integer>> triangle = new ArrayList<List<Integer>>();
        
        triangle.add(new ArrayList<Integer>());
        triangle.get(0).add(1);
        
        for (int rowNum = 1; rowNum <= rowIndex; rowNum++){
            List<Integer> row = new ArrayList<Integer>();
            List<Integer> prevRow = triangle.get(rowNum-1);
            
            row.add(1);
            
            for (int j = 1; j < rowNum; j++){
                row.add(prevRow.get(j-1) + prevRow.get(j));
            }
            
            row.add(1);
            triangle.add(row);
        }
        
        return triangle.get(rowIndex);
    }
}

/**
**Runtime: 1 ms, faster than 89.00% of Java online submissions for Pascal's Triangle II.
**Memory Usage: 33.7 MB, less than 6.17% of Java online submissions for Pascal's Triangle II.
*/
