/*** Easy Problem 18: Bit Manipulation - Majority Element */
/**
**Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.
**You may assume that the array is non-empty and the majority element always exist in the array.

**Example:
**Input: [2,2,1,1,1,2,2]
**Output: 2
*/

class Solution {
    public int majorityElement(int[] nums) {
        Map<Integer,Integer> map = new HashMap<>(); 
        int result = 0; 
        for (int n: nums) map.put(n,map.getOrDefault(n,0)+1);
       
        for (int k: map.keySet())
            if (map.get(k) > nums.length/2)
                result = k;
        
        return result;
    }
}

/**
**Runtime: 12 ms, faster than 36.51% of Java online submissions for Majority Element.
**Memory Usage: 39.4 MB, less than 99.26% of Java online submissions for Majority Element.
*/
