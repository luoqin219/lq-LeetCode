/*** Easy Problem 16: Sort Array By Parity 2 */
/**
**Given an array A of non-negative integers, half of the integers in A are odd, and half of the integers are even.
**Sort the array so that whenever A[i] is odd, i is odd; and whenever A[i] is even, i is even.
**You may return any answer array that satisfies this condition.
**Example:
**Input: [4,2,5,7]
**Output: [4,5,2,7]
**Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.
*/

class Solution {
    public int[] sortArrayByParityII(int[] A) {        
        int[] result = new int[A.length];
        int countOdd = 1;
        int countEven = 0;
        for (int i = 0; i < A.length; i++)
            if (A[i] % 2 == 0){
                result[countEven] = A[i];
                countEven += 2;
            }
            else{
                result[countOdd] = A[i];
                countOdd += 2;
            }
        
        return result;
    }
}

/**
**Runtime: 2 ms, faster than 99.65% of Java online submissions for Sort Array By Parity II.
**Memory Usage: 42.2 MB, less than 70.37% of Java online submissions for Sort Array By Parity II.
*/
