/*** Easy Problem 3: Remove Duplicates from Sorted Array */
/**
**Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.
**Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
**Example:
**Given nums = [1,1,2],
**Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.
*/

class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums.length == 0 || nums.length == 1)
            return nums.length;
        int i = 0;
        for (int j = 1; j < nums.length; j++){
            if (nums[i] != nums[j]){
                i++;
                nums[i] = nums[j];
            }
        }
        return i+1;
    }
}

/**
**Runtime: 1 ms, faster than 97.19% of Java online submissions for Remove Duplicates from Sorted Array.
**40.3 MB, less than 76.06% of Java online submissions for Remove Duplicates from Sorted Array.
*/
