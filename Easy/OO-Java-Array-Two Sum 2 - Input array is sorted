/*** Easy Problem 24: Two Sum 2 - Input array is sorted */
/**
**Given an array of integers that is already sorted in ascending order, 
**find two numbers such that they add up to a specific target number.
**The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.
**Note:
**Your returned answers (both index1 and index2) are not zero-based.
**You may assume that each input would have exactly one solution and you may not use the same element twice.
**Example 1:
**Input: [7,1,5,3,6,4]
**Output: 7
**Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
**Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
*/

//when it comes a sorted array, consider about using left and right index to accelarate the program.
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] result = new int[2];
        int left = 0;
        int right = numbers.length-1;
        while ((numbers[left] + numbers[right]) != target){
            if ((numbers[left] + numbers[right]) > target) {
                right--;
            }
            else if ((numbers[left] + numbers[right]) < target){
                left++;
            }
        }
        result[0] = left + 1;
        result[1] = right + 1;
        return result;
    }
}

/**
**Runtime: 1 ms, faster than 55.93% of Java online submissions for Two Sum II - Input array is sorted.
**Memory Usage: 37.8 MB, less than 99.25% of Java online submissions for Two Sum II - Input array is sorted.
*/
