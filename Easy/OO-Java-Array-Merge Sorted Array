/*** Easy Problem 6: Merge Sorted Array */
/**
**The number of elements initialized in nums1 and nums2 are m and n respectively.
**You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
**Example:
**Input: nums1 = [1,2,3,0,0,0], m = 3; nums2 = [2,5,6],       n = 3
**Output: [1,2,2,3,5,6]
*/

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m - 1, j = n - 1, k = m + n - 1;
        while(i >= 0 && j >= 0) {
            nums1[k--] = nums1[i] > nums2[j] ? nums1[i--] : nums2[j--];
        }
        while(j >= 0) {
            nums1[k--] = nums2[j--];
        }
    }
}

/**
**Runtime: 0 ms, faster than 100.00% of Java online submissions for Merge Sorted Array.
**Memory Usage: 36.1 MB, less than 100.00% of Java online submissions for Merge Sorted Array.
*/
