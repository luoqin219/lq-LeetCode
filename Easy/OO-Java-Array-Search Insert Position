/*** Easy Problem 5: Search Insert Position */
/**
**Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
**You may assume no duplicates in the array.
**Example:
**Given nums = [1,3,5,6], 5
**Output = 2
*/

class Solution {
    public int searchInsert(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;
        int result = 0;
        
        while (low < high){
            int middle = (high + low) / 2;
            if (target < nums[middle])
                high = middle - 1;
            else if (target > nums[middle])
                low = middle + 1;
            else
                return middle;
        }
        if (target <= nums[low]) 
            result = low;
        else 
            result = low + 1;
        
        return result;
    }
}

/**
**Runtime: 0 ms, faster than 100.00% of Java online submissions for Search Insert Position.
**Memory Usage: 39.2 MB, less than 100.00% of Java online submissions for Search Insert Position.
