/*** Easy Problem 10: Linked List Cycle */
/**
**Given a linked list, determine if it has a cycle in it.
**To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. 
**If pos is -1, then there is no cycle in the linked list.
**Example:
**Input: head = [3,2,0,-4], pos = 1
**Output: true
**Explanation: There is a cycle in the linked list, where tail connects to the second node.
*/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        Set<ListNode> nodeSet = new HashSet<>();

        while (head != null){
            if (nodeSet.contains(head)){
                return true;
            }
            else{
                nodeSet.add(head);
            }
            
            head = head.next;
        }
        
        return false;
    }
}

/**
**Runtime: 4 ms, faster than 20.29% of Java online submissions for Linked List Cycle.
**Memory Usage: 37.7 MB, less than 85.00% of Java online submissions for Linked List Cycle.
*/
