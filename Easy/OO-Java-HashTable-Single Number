    
/*** Easy Problem 7: Single Number */
/**
**Given a non-empty array of integers, every element appears twice except for one. Find that single one.
**Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? (The best method should be using XOR)
**Example:
**Input: [2,2,1]
**Output: 1
*/

import java.util.*;

class Solution {
    public int singleNumber(int[] nums) {
        Hashtable<Integer,Integer> table = new Hashtable<Integer,Integer>();
        table.put(nums[0], 1);
    
        int temp = 0;
        for(int i = 1; i < nums.length; i++){
            if(table.containsKey(nums[i])){
               table.put(nums[i],table.get(nums[i])+1);
            }
            else{
              table.put(nums[i],1);
            }
        }
        for(int i = 0; i < nums.length; i++){
           if(table.get(nums[i]) == 1){
                temp = nums[i];
            }
       }
        return temp;
  }
}

**Runtime: 10 ms
**Memory Usage: 39.2 MB
*/
