/*** Easy Problem 13: Middle of the Linked List */
/**
**Given a non-empty, singly linked list with head node head, return a middle node of linked list.
**If there are two middle nodes, return the second middle node.
**Example:
**Input: [1,2,3,4,5]
**Output: Node 3 from this list (Serialization: [3,4,5])
*/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode curr = head;
        int count = 0;
        while (curr != null && curr.next != null){
            count++;
            curr = curr.next;
        }
        
        ListNode node = head;
        if (count % 2 != 0)
            count = count/2+1;      
        else
            count = count/2;
        
        for (int j = 0; j < count; j++){
            node = node.next;
        }
        
        return node;
    }
}

/**
**Runtime: 0 ms, faster than 100.00% of Java online submissions for Middle of the Linked List.
**Memory Usage: 34.1 MB, less than 100.00% of Java online submissions for Middle of the Linked List.
*/
