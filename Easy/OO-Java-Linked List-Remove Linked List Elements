/*** Easy Problem 12: Remove Linked List Elements */
/**
**Given a linked list, determine if it has a cycle in it.
**Remove all elements from a linked list of integers that have value val.
**Example:
**Input:  1->2->6->3->4->5->6, val = 6
**Output: 1->2->3->4->5
*/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 
public class Solution {
    public ListNode removeElements(ListNode head, int val) {
        while (head != null && head.val == val) head = head.next;
        ListNode curr = head;
        while (curr != null && curr.next != null)
            if (curr.next.val == val) 
                curr.next = curr.next.next;
            else 
                curr = curr.next;
        return head;
    }
}

/**
**Runtime: 1 ms, faster than 98.34% of Java online submissions for Remove Linked List Elements.
**Memory Usage: 39.7 MB, less than 100.00% of Java online submissions for Remove Linked List Elements.
*/
